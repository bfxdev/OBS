// Provided by OBS and StreamFX
uniform float4x4 ViewProj<bool automatic = true;>;
uniform float4 Time<bool automatic = true;>;
uniform float4 ViewSize<bool automatic = true;>;
uniform texture2d InputA<bool automatic = true;>;
uniform float4x4 Random<bool automatic = true;>;  // Apparently not initialized

// User settings

uniform float3 TextColor <
	string name = "Color of the text";
	string field_type = "slider";
	float3 minimum = {0.0, 0.0, 0.0};
	float3 maximum = {1.0, 1.0, 1.0};
> = {1.0, 1.0, 1.0}; 

// Definition of the processing of the input texture
sampler_state def_sampler
{
	AddressU  = Mirror;
	AddressV  = Mirror;
	Filter    = Linear;
};

// Helper structure used as input of the vertex and fragment shaders
struct VertFragData
{
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

// Vertex Shader code 
VertFragData VSDefault(VertFragData vtx)
{
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	return vtx;
}

// Returns true if the font pixel at x,y for given character is set
// Character is an integer containing the ASCII code
// x and y are in range 0..7 in fragment coordinates (x to right, y to bottom)
bool getFontDot(in int character, in int x, in int y)
{
	// Character font of the Amstrad CPC (from ROM)
	static const int FontCPC[] =
	{
		0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
		0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 
		0x0c, 0x18, 0x30, 0x7e, 0x0c, 0x18, 0x30, 0x00, 0xff, 0xc3, 0xe7, 0xdb, 0xdb, 0xe7, 0xc3, 0xff, 
		0x00, 0x01, 0x03, 0x06, 0xcc, 0x78, 0x30, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xff, 0x24, 0xe7, 0x00, 
		0x00, 0x00, 0x30, 0x60, 0xff, 0x60, 0x30, 0x00, 0x00, 0x00, 0x0c, 0x06, 0xff, 0x06, 0x0c, 0x00, 
		0x18, 0x18, 0x18, 0x18, 0xdb, 0x7e, 0x3c, 0x18, 0x18, 0x3c, 0x7e, 0xdb, 0x18, 0x18, 0x18, 0x18, 
		0x18, 0x5a, 0x3c, 0x99, 0xdb, 0x7e, 0x3c, 0x18, 0x00, 0x03, 0x33, 0x63, 0xfe, 0x60, 0x30, 0x00, 
		0x3c, 0x66, 0xff, 0xdb, 0xdb, 0xff, 0x66, 0x3c, 0x3c, 0x66, 0xc3, 0xdb, 0xdb, 0xc3, 0x66, 0x3c, 
		0xff, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xff, 0x3c, 0x7e, 0xdb, 0xdb, 0xdf, 0xc3, 0x66, 0x3c, 
		0x3c, 0x66, 0xc3, 0xdf, 0xdb, 0xdb, 0x7e, 0x3c, 0x3c, 0x66, 0xc3, 0xfb, 0xdb, 0xdb, 0x7e, 0x3c, 
		0x3c, 0x7e, 0xdb, 0xdb, 0xfb, 0xc3, 0x66, 0x3c, 0x00, 0x01, 0x33, 0x1e, 0xce, 0x7b, 0x31, 0x00, 
		0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xe7, 0x03, 0x03, 0x03, 0xff, 0x03, 0x03, 0x03, 0x00, 
		0xff, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xff, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 
		0x3c, 0x66, 0x66, 0x30, 0x18, 0x00, 0x18, 0x00, 0x3c, 0x66, 0xc3, 0xff, 0xc3, 0xc3, 0x66, 0x3c, 
		0xff, 0xdb, 0xdb, 0xdb, 0xfb, 0xc3, 0xc3, 0xff, 0xff, 0xc3, 0xc3, 0xfb, 0xdb, 0xdb, 0xdb, 0xff, 
		0xff, 0xc3, 0xc3, 0xdf, 0xdb, 0xdb, 0xdb, 0xff, 0xff, 0xdb, 0xdb, 0xdb, 0xdf, 0xc3, 0xc3, 0xff, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00, 
		0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 
		0x18, 0x3e, 0x58, 0x3c, 0x1a, 0x7c, 0x18, 0x00, 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00, 
		0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 
		0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 
		0x7c, 0xc6, 0xce, 0xd6, 0xe6, 0xc6, 0x7c, 0x00, 0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 
		0x3c, 0x66, 0x06, 0x3c, 0x60, 0x66, 0x7e, 0x00, 0x3c, 0x66, 0x06, 0x1c, 0x06, 0x66, 0x3c, 0x00, 
		0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00, 0x7e, 0x62, 0x60, 0x7c, 0x06, 0x66, 0x3c, 0x00, 
		0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00, 0x7e, 0x66, 0x06, 0x0c, 0x18, 0x18, 0x18, 0x00, 
		0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00, 0x3c, 0x66, 0x66, 0x3e, 0x06, 0x66, 0x3c, 0x00, 
		0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, 
		0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 
		0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x3c, 0x66, 0x66, 0x0c, 0x18, 0x00, 0x18, 0x00, 
		0x60, 0x10, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00, 0x18, 0x3c, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x00, 
		0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00, 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00, 
		0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00, 
		0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00, 0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00, 
		0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 
		0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 
		0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00, 
		0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 
		0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xda, 0xcc, 0x76, 0x00, 
		0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00, 0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00, 
		0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 
		0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00, 
		0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x00, 
		0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 
		0x00, 0x00, 0x3c, 0x66, 0x60, 0x3e, 0x08, 0x18, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 
		0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
		0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00, 
		0xe0, 0x60, 0x7c, 0x66, 0x66, 0x66, 0xdc, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x00, 
		0x1c, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00, 
		0x1c, 0x36, 0x30, 0x78, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x7c, 
		0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00, 
		0x06, 0x00, 0x0e, 0x06, 0x06, 0x66, 0x66, 0x3c, 0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00, 
		0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xd6, 0xd6, 0xc6, 0x00, 
		0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00, 
		0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e, 
		0x00, 0x00, 0xdc, 0x76, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x60, 0x3c, 0x06, 0x7c, 0x00, 
		0x30, 0x30, 0x7c, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, 
		0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 
		0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x7c, 
		0x00, 0x00, 0x7e, 0x4c, 0x18, 0x32, 0x7e, 0x00, 0x06, 0x08, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00, 
		0x30, 0x08, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, 0x60, 0x10, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00, 
		0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 
		0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
		0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 
		0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 
		0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 
		0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
		0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
		0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x1f, 0x0f, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
		0x00, 0x00, 0x00, 0x0f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x1f, 0x18, 0x18, 0x18, 
		0x00, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xf8, 0xf0, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xff, 0xff, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0xf0, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0xf8, 0x18, 0x18, 0x18, 
		0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 
		0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x38, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0xf8, 0x60, 0x66, 0xfe, 0x00, 
		0x38, 0x44, 0xba, 0xa2, 0xba, 0x44, 0x38, 0x00, 0x7e, 0xf4, 0xf4, 0x74, 0x34, 0x34, 0x34, 0x00, 
		0x1e, 0x30, 0x38, 0x6c, 0x38, 0x18, 0xf0, 0x00, 0x18, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x40, 0xc0, 0x44, 0x4c, 0x54, 0x1e, 0x04, 0x00, 0x40, 0xc0, 0x4c, 0x52, 0x44, 0x08, 0x1e, 0x00, 
		0xe0, 0x10, 0x62, 0x16, 0xea, 0x0f, 0x02, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x7e, 0x00, 
		0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x06, 0x06, 0x00, 0x00, 
		0x18, 0x00, 0x18, 0x30, 0x66, 0x66, 0x3c, 0x00, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 
		0x00, 0x00, 0x73, 0xde, 0xcc, 0xde, 0x73, 0x00, 0x7c, 0xc6, 0xc6, 0xfc, 0xc6, 0xc6, 0xf8, 0xc0, 
		0x00, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00, 0x3c, 0x60, 0x60, 0x3c, 0x66, 0x66, 0x3c, 0x00, 
		0x00, 0x00, 0x1e, 0x30, 0x7c, 0x30, 0x1e, 0x00, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00, 
		0x00, 0xc0, 0x60, 0x30, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 
		0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0x70, 0x00, 
		0x03, 0x06, 0x0c, 0x3c, 0x66, 0x3c, 0x60, 0xc0, 0x03, 0x06, 0x0c, 0x66, 0x66, 0x3c, 0x60, 0xc0, 
		0x00, 0xe6, 0x3c, 0x18, 0x38, 0x6c, 0xc7, 0x00, 0x00, 0x00, 0x66, 0xc3, 0xdb, 0xdb, 0x7e, 0x00, 
		0xfe, 0xc6, 0x60, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x6c, 0xee, 0x00, 
		0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 
		0x18, 0x3c, 0x66, 0xc3, 0x81, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x06, 0x03, 0x03, 0x06, 0x0c, 0x18, 
		0x00, 0x00, 0x00, 0x81, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x30, 0x60, 0xc0, 0xc0, 0x60, 0x30, 0x18, 
		0x18, 0x30, 0x60, 0xc1, 0x83, 0x06, 0x0c, 0x18, 0x18, 0x0c, 0x06, 0x83, 0xc1, 0x60, 0x30, 0x18, 
		0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0xc3, 0xe7, 0x7e, 0x3c, 0x3c, 0x7e, 0xe7, 0xc3, 
		0x03, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xc0, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0x03, 
		0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 
		0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
		0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 
		0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 
		0xaa, 0x55, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 
		0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xa0, 0x50, 0xa0, 0x50, 0xa0, 0x50, 0xa0, 0x50, 
		0xaa, 0x54, 0xa8, 0x50, 0xa0, 0x40, 0x80, 0x00, 0xaa, 0x55, 0x2a, 0x15, 0x0a, 0x05, 0x02, 0x01, 
		0x01, 0x02, 0x05, 0x0a, 0x15, 0x2a, 0x55, 0xaa, 0x00, 0x80, 0x40, 0xa0, 0x50, 0xa8, 0x54, 0xaa, 
		0x7e, 0xff, 0x99, 0xff, 0xbd, 0xc3, 0xff, 0x7e, 0x7e, 0xff, 0x99, 0xff, 0xc3, 0xbd, 0xff, 0x7e, 
		0x38, 0x38, 0xfe, 0xfe, 0xfe, 0x10, 0x38, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 
		0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0xfe, 0x10, 0x38, 0x00, 
		0x00, 0x3c, 0x66, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x3c, 0x00, 
		0x00, 0x7e, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x00, 
		0x0f, 0x07, 0x0d, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 
		0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x7c, 0x38, 0x18, 0x1c, 0x1e, 0x1b, 0x18, 0x78, 0xf8, 0x70, 
		0x99, 0x5a, 0x24, 0xc3, 0xc3, 0x24, 0x5a, 0x99, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x7c, 0xd6, 
		0x18, 0x3c, 0x7e, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x7e, 0x3c, 0x18, 
		0x10, 0x30, 0x70, 0xff, 0xff, 0x70, 0x30, 0x10, 0x08, 0x0c, 0x0e, 0xff, 0xff, 0x0e, 0x0c, 0x08, 
		0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 
		0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00, 0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00, 
		0x38, 0x38, 0x92, 0x7c, 0x10, 0x28, 0x28, 0x28, 0x38, 0x38, 0x10, 0xfe, 0x10, 0x28, 0x44, 0x82, 
		0x38, 0x38, 0x12, 0x7c, 0x90, 0x28, 0x24, 0x22, 0x38, 0x38, 0x90, 0x7c, 0x12, 0x28, 0x48, 0x88, 
		0x00, 0x3c, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x3c, 0xff, 0xff, 0x18, 0x0c, 0x18, 0x30, 0x18, 
		0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 
	};

	return (FontCPC[(character<<3) + y] & (1<<(7-x))) != 0;
}

// Returns true if the position given in pos is one a pixel of the
//  text contains in a rectangle at textPosition.xy of size textSize.xy
bool getTextDot(in float2 pos, in float2 textPosition, in float2 textSize)
{
	static const int text[] = {'N','o','i','x',' ','D','e',' ','C','r','o','c','o'};
	static const int len = 13;

	// Returns false if the current position is not inside the rectangle with the text
	if (pos.x < textPosition.x || pos.x >= (textPosition.x + textSize.x) ||
			pos.y < textPosition.y || pos.y >= (textPosition.y + textSize.y))
		return false;

	// Adjust current position to [0.0, 1.0] range within text rectangle
	float2 apos = (pos - textPosition) / textSize;

	// Determines character according to adjusted position
	int character = text[uint(floor(len * apos.x))];

	// Determines position within character
	int x = uint(floor(len*8*apos.x)) & 7;
	int y = uint(floor(8*apos.y)) & 7;

	// Returns true/false depending on given character within font
	return getFontDot(character, x, y);
}


// Main function called for each single pixel
float4 PSDefault(VertFragData vtx) : TARGET
{
    // Size of the text rectangle relative to the size of the video source (set in ViewSize.xy)
    float2 textSize = float2(ViewSize.x*4.0,
                             ViewSize.y*0.5);

    // Position of the text rectangle, x coordinate given by simple sinusoid according to time
    float2 textPosition = float2(ViewSize.x*(2.0*sin(Time.x/3.0)-1.0),
                                 ViewSize.y*(0.25));

    // Color of the current pixel from the input source given as texture
    float4 smp = InputA.Sample(def_sampler, vtx.uv);

    // Tests if the current pixel (at vtx.pos.xy) is on one pixel of the text message
	if (getTextDot(vtx.pos.xy, textPosition, textSize))

    // Returns user selected color if current pixel is on message, with alpha=1.0
		return abs(float4(sin(vtx.uv.y*1000.0), vtx.uv.y*sin(Time.x*3.0), 1.0, 1.0));
  else
        // Returns color of source image for current position
  return smp;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDefault(vtx); 
	}
}






